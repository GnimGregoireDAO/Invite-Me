package com.inviteme.ui

// Importations n√©cessaires pour l'activit√©, les widgets, les th√®mes, etc.
import android.content.Intent
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.app.AppCompatDelegate
import androidx.appcompat.widget.SwitchCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.lifecycle.ViewModelProvider
import com.inviteme.R
import com.inviteme.viewmodel.ConnexionViewModel

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        // 1. Appliquer le th√®me sombre ou clair selon les pr√©f√©rences enregistr√©es
        val prefs = getSharedPreferences("settings", MODE_PRIVATE) // acc√®s aux pr√©f√©rences
        val isNightMode = prefs.getBoolean("night_mode", false) // r√©cup√®re l'√©tat du mode nuit
        AppCompatDelegate.setDefaultNightMode(
            if (isNightMode) AppCompatDelegate.MODE_NIGHT_YES else AppCompatDelegate.MODE_NIGHT_NO
        )

        // 2. Initialisation de l'activit√©
        super.onCreate(savedInstanceState)
        enableEdgeToEdge() // permet l‚Äôaffichage plein √©cran (sans marges inutiles)
        setContentView(R.layout.activity_main) // lie l'activit√© √† son layout XML

        // 3. Ajuster les marges pour √©viter que le contenu ne soit coup√© (en mode plein √©cran)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        // 4. G√©rer le switch de th√®me dans l‚Äôinterface (claire ‚Üî sombre)
        val switch = findViewById<SwitchCompat>(R.id.themeSwitch)
        switch.isChecked = isNightMode // applique l‚Äô√©tat actuel au switch
        switch.setOnCheckedChangeListener { _, isChecked ->
            // sauvegarde le choix de l‚Äôutilisateur
            prefs.edit().putBoolean("night_mode", isChecked).apply()
            // applique le nouveau th√®me
            AppCompatDelegate.setDefaultNightMode(
                if (isChecked) AppCompatDelegate.MODE_NIGHT_YES else AppCompatDelegate.MODE_NIGHT_NO
            )
            recreate() // recharge l'activit√© pour appliquer le th√®me imm√©diatement
        }

        // 5. Initialiser le ViewModel pour g√©rer la logique de connexion
        val viewModel = ViewModelProvider(this)[ConnexionViewModel::class.java]

        // 6. R√©cup√©rer les r√©f√©rences aux champs email et mot de passe + bouton de connexion
        val emailEditText = findViewById<EditText>(R.id.nom_signup) // champ pour l‚Äôemail
        val passwordEditText = findViewById<EditText>(R.id.confirm_password_login) // champ pour le mot de passe
        val loginButton = findViewById<Button>(R.id.signup_button) // bouton de connexion

        // 7. G√©rer le clic sur le bouton de connexion
        loginButton.setOnClickListener {
            // R√©cup√©rer le contenu des champs
            val email = emailEditText.text.toString().trim()
            val password = passwordEditText.text.toString().trim()

            // V√©rifie si un des champs est vide
            if (email.isEmpty() || password.isEmpty()) {
                Toast.makeText(this, "Veuillez remplir tous les champs", Toast.LENGTH_SHORT).show()
                return@setOnClickListener // stoppe la fonction ici
            }

            // Appel au ViewModel pour tenter de se connecter
            viewModel.connecter(
                email = email,
                password = password,
                // Si la connexion est un succ√®s
                onSuccess = { utilisateur ->
                    Toast.makeText(this, "Connexion r√©ussie ! Bienvenue ${utilisateur.prenom}", Toast.LENGTH_SHORT).show()
                    // Redirection possible vers une autre activit√© (√† d√©commenter si besoin)
                     startActivity(Intent(this, EvenementListActivity::class.java))
                    finish() // termine cette activit√©
                },
                // Si une erreur se produit (email inexistant ou mot de passe incorrect)
                onError = { message ->
                    Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
                }
            )
        }
        // üîΩ Ligne ajout√©e : redirection vers l'inscription quand on clique sur le bouton "Cr√©er un compte"

// Trouve la vue TextView dans le layout via son ID "creer_compte_button"
        val creerCompteBtn = findViewById<TextView>(R.id.creer_compte_button)

// Ajoute un √©couteur d'√©v√©nement qui se d√©clenche au clic sur ce TextView
        creerCompteBtn.setOnClickListener {
            // Cr√©e une intention (Intent) pour d√©marrer l'activit√© SignUpActivity
            // "this" repr√©sente le contexte actuel (MainActivity)
            startActivity(Intent(this, SignUpActivity::class.java))
            // Lancement de l'activit√© d'inscription √† l'√©cran
        }

    }
}
